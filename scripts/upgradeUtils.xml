<project name="DockerUtilities" default="help" xmlns:pega="pega:/pega.com" xmlns:ac="ac:/antcontrib.org">
<import file="commonUtilities.xml"/>
   
   <!-- ANTCONTRIB LIBRARY -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" uri="ac:/antcontrib.org">
        <classpath>
            <pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
	
    <!-- PEGA CUSTOM TASKS -->
    <taskdef resource="com/pega/pegarules/util/anttasks/tasks.properties" uri="pega:/pega.com">
        <classpath>
            <fileset dir="${basedir}/lib">
                <include name="*.jar" />
            </fileset>
            <fileset dir="${basedir}">
                <include name="prdeploy.jar" />
            </fileset>
        </classpath>
    </taskdef>
	
    <!--PEGA CUSTOM TYPES (e.g. conditions) -->
    <typedef resource="com/pega/pegarules/util/anttasks/types.properties" uri="pega:/pega.com">
        <classpath>
            <fileset dir="${basedir}/lib">
                <include name="*.jar" />
            </fileset>
            <fileset dir="${basedir}">
                <include name="prdeploy.jar" />
            </fileset>
        </classpath>
    </typedef>
	
    <property name="pega.install.root" value="${basedir}" />
    <property name="pega.prdeploy" value="${pega.install.root}/prdeploy.jar" />
    <property name="pega.rules" value="${pega.install.root}/../rules/" />
	
    <target name="Initialization">
        <pega:propertyparser propfile="${basedir}/setupDatabase.properties" echo="true"/>
        <fail message="JDBC Driver Class must be specified" unless="pega.jdbc.driver.class"/>
        <fail message="JDBC URL must be specified" unless="pega.jdbc.url"/>
        <fail message="Database username must be specified" unless="pega.jdbc.username"/>
        <fail message="Database password must be specified" unless="pega.jdbc.password"/>
        <!-- Set the respective connection properties -->
        <condition property="custom.connection.properties" value="${jdbc.custom.connection.properties}" else="">
            <isset property="jdbc.custom.connection.properties"/>
        </condition>
        <!-- First try to use the rules.schema.name property -->
        <condition property="rules.schema" value="${rules.schema.name}">
            <and>
                <isset property="rules.schema.name"/>
                <not>
                    <equals arg1="${rules.schema.name}" arg2="" />
                </not>
            </and>
        </condition>

        <ac:if>
            <not>
                <isset property="rules.schema"/>
            </not>
            <ac:then>
                <!-- Attempt to grab the default schema for the connection -->
                <pega:introspectschema property="rules.schema"
									  driverJar="${pega.jdbc.driver.jar}"
									  driverClass="${pega.jdbc.driver.class}"
									  url="${pega.jdbc.url}"
									  user="${pega.jdbc.username}"
									  password="${pega.jdbc.password}"
									  customproperties="${custom.connection.properties}"/>
                <!-- We still don't have a schema, default to the username -->
                <!--(May have caught exception, but ignore since script could be used in non-standard way) -->
                <condition property="rules.schema" value="${pega.jdbc.username}">
                    <not>
                        <isset property="rules.schema"/>
                    </not>
                </condition>
                <echo message="***"/>
                <echo message="*** No schema provided, defaulting to user default of ${rules.schema} ***"/>
                <echo message="***"/>
            </ac:then>
        </ac:if>
        <echo message="Rules schema has been set to '${rules.schema}'"/>
        <!-- Set the data.schema, if one hasn't been specified we're using single schema, use the rules schema -->
        <condition property="data.schema" value="${data.schema.name}" else="${rules.schema}">
            <and>
                <isset property="data.schema.name"/>
                <not>
                    <equals arg1="${data.schema.name}" arg2="" />
                </not>
            </and>
        </condition>
        <!-- Set the customerdata.schema, if one hasn't been specified, use the data schema -->
        <condition property="customerdata.schema" value="${customerdata.schema.name}" else="${data.schema}">
            <and>
                <isset property="customerdata.schema.name"/>
                <not>
                    <equals arg1="${customerdata.schema.name}" arg2="" />
                </not>
            </and>
        </condition>
        <!-- verify that the schema has been set either in rules.schema.name, db.schema.name, or udb.schema.name -->
        <condition property="db.schema.set" value="true">
            <isset property="rules.schema"/>
        </condition>
        <!-- fail if the schema was not explicitly set -->
        <fail message="The schema name must be explicitly set using the property rules.schema.name in setupDatabase.properties" unless="db.schema.set"/>
        <ac:if>
            <or>
                <!-- mssql is mixed case names -->
                <!-- equals arg1="${pega.database.type}" arg2="mssql" / -->
                <equals arg1="${pega.database.type}" arg2="oracledate" />
                <equals arg1="${pega.database.type}" arg2="udb" />
                <equals arg1="${pega.database.type}" arg2="db2zos" />
            </or>
            <ac:then>
                <pega:uppercase string="${rules.schema}" property="rules.schema"/>
                <pega:uppercase string="${data.schema}" property="data.schema"/>
                <pega:uppercase string="${customerdata.schema}" property="customerdata.schema"/>
            </ac:then>
        </ac:if>
        <condition property="database.connection.properties" value="${custom.connection.properties}currentSchema=${data.schema}" >
            <or>
                <equals arg1="${pega.database.type}" arg2="udb" />
                <equals arg1="${pega.database.type}" arg2="db2zos" />
            </or>
        </condition>
        <condition property="database.connection.properties" value="${custom.connection.properties}" >
            <or>
                <equals arg1="${pega.database.type}" arg2="mssql" />
                <equals arg1="${pega.database.type}" arg2="postgres"/>
            </or>
        </condition>
        <condition property="database.connection.properties" value="${custom.connection.properties}oracle.jdbc.V8Compatible=true" >
            <equals arg1="${pega.database.type}" arg2="oracledate" />
        </condition>
        <!-- Check to see if we have a Site Dependent Properties file -->
        <condition property="pega.zos.properties.set" value="true">
            <and>
                <isset property="pega.zos.properties"/>
                <not>
                    <equals arg1="${pega.zos.properties}" arg2=""/>
                </not>
            </and>
        </condition>
        <!-- If we don't, do we care? -->
        <fail message="'pega.zos.properties' must point to a file containing site-specific properties. See scripts\config\db2zos\DB2SiteDependent.properties as an example file.">
            <condition>
                <!-- no site dependent props file && we're db2zos -->
                <and>
                    <not>
                        <isset property="pega.zos.properties.set"/>
                    </not>
                    <equals arg1="${pega.database.type}" arg2="db2zos"/>
                </and>
            </condition>
        </fail>
        <ac:if>
            <and>
                <equals arg1="${pega.database.type}" arg2="db2zos"/>
                <not>
                    <equals arg1="${autoload.zos.database.settings}" arg2="false"/>
                </not>
                <isset property="pega.zos.properties.set"/>
            </and>
            <ac:then>
                <pega:getzospropsasstring settingSource="${pega.zos.properties}" propertyName="zos.database.settings"/>
            </ac:then>
        </ac:if>
        
        <!-- Validate DB2SiteDependent.properties file-->
        <ac:if>
            <and>
                <!-- we're db2zos && we're gen/applying ddl && we have site dependent props -->
                <equals arg1="${pega.database.type}" arg2="db2zos" />
                <not>
                    <equals arg1="${bypass.pega.schema.set}" arg2="true" />
                </not>
                <isset property="pega.zos.properties.set"/>
            </and>
            <ac:then>
				<tstamp>
					<format property="install.datetime" pattern="dd-MMMM-yyyy-HH.mm.ss" locale="en,US"/>
				</tstamp>
				<condition property="user.temp.dir.root" value="${user.temp.dir}">
					<and>
						<isset property="user.temp.dir"/>
					<not>
						<equals arg1="${user.temp.dir}" arg2="" />
					</not>
						<available file="${user.temp.dir}" type="dir" />
					</and>
				</condition>
				<condition property="install.temp.dir.root" 	value="${user.temp.dir.root}"
																else="${java.io.tmpdir}">
					<isset property="user.temp.dir.root"/>
				</condition>
				<property name="install.temp.dir" value="${install.temp.dir.root}/PegaInstallTemp-${install.datetime}"/>
		
				<property name="load.temp.dir" value="${install.temp.dir}/load/"/>
				<mkdir dir="${load.temp.dir}"/>
				<mkdir dir="${install.temp.dir}"/>
				
				<!-- JVM arguments that will be provided to each forked Java process -->
				<condition property="jvm.arg.mem.max.temp" value="${jvm.arg.mem.max}" else="-Xmx1280m">
					<isset property="jvm.arg.mem.max"/>
				</condition>
				<property name="jvm.args.temp" value="${jvm.arg.mem.max.temp}"/>

				<condition property="use.dev.urandom" value="-Djava.security.egd=file:///dev/urandom" else="">
					<and>
						<equals arg1="${pega.database.type}" arg2="oracledate" />
						<os family="unix"/>
					</and>
				</condition>
				
				<property name="jvm.args" value="${jvm.args.temp} ${use.dev.urandom}"/>
				
                <java classname="com.pega.pegarules.util.deploy.ZosProperties" failonerror="true" fork="true" dir="${load.temp.dir}">
                    <classpath>
                        <pathelement location="${pega.prdeploy}"/>
                    </classpath>
                    <jvmarg line="${jvm.args}"/>
                    <arg line="--validate '${pega.zos.properties}'"/>
                </java>
            </ac:then>
        </ac:if>
    </target>
	
    <target name="Validate">
        <fail message="Please pass value for 'result.filepath' ">
            <condition>
                <or>
                    <not>
                        <isset property="result.filepath"/>
                    </not>
                    <and>
                        <isset property="result.filepath"/>
                        <equals arg1="${result.filepath}" arg2="" />
                    </and>
                </or>
            </condition>
        </fail>
	<echo file="${result.filepath}" append="false">test=test${line.separator}</echo>
    </target>
	
	<target name="TestConnection">
		<!-- We have all the necessary connection information, test the connection -->
        <pega:testconnectioninfo dbType="${pega.database.type}"
									 drivers="${pega.jdbc.driver.jar}"
									 driverClass="${pega.jdbc.driver.class}"
									 url="${pega.jdbc.url}"
									 user="${pega.jdbc.username}"
									 password="${pega.jdbc.password}"
									 rulesSchema="${rules.schema}"
									 dataSchema="${data.schema}"
									 customerDataSchema="${customerdata.schema}"
									 properties="${database.connection.properties}"
									 requireSchema="true"/>
	</target>
	
	<target name="Install" depends="Get_Build_Codeset_Version" />
	<target name="Upgrade" depends="Get_Build_Codeset_Version" />
	<target name="Pre-upgrade" depends="Get_Codeset_Version,Get_Build_Codeset_Version,Is_Patch_Upgrade" />
	<target name="Post-upgrade" depends="Get_Codeset_Version" />

	<target name="Get_Build_Codeset_Version" depends="Initialization,Validate">
		<readcodesetfromprdeploy targetProp="prdeploy.codeset" prdeployLocation="${pega.prdeploy}"/>
		<echo file="${result.filepath}" append="true">prdeploy_codeset_version=${prdeploy.codeset}${line.separator}</echo>
	</target>
	
    <target name="Get_Codeset_Version" depends="Initialization,TestConnection,Validate">
        <pega:getcodesetversion dbType="${pega.database.type}"
												url="${pega.jdbc.url}"
												user="${pega.jdbc.username}"
												password="${pega.jdbc.password}"
												properties="${custom.connection.properties}"
												drivers="${pega.jdbc.driver.jar}"
												driverClass="${pega.jdbc.driver.class}"
												rulesSchema="${rules.schema}"
												codeSetVersion="codeset.version"/>
        <echo file="${result.filepath}" append="true">engine_codeset_version=${codeset.version}${line.separator}</echo>
    </target>
	
    <target name="Is_Patch_Upgrade" depends="Initialization,TestConnection,Validate">
        <!-- Check for the most recent product version on the system -->
        <pega:getupgradefromversion dbType="${pega.database.type}"
												url="${pega.jdbc.url}"
												user="${pega.jdbc.username}"
												password="${pega.jdbc.password}"
												properties="${custom.connection.properties}"
												driverJar="${pega.jdbc.driver.jar}"
												driverClass="${pega.jdbc.driver.class}"
												rulesSchema="${rules.schema}"
												dataSchema="${data.schema}"
												propertyName="previous.product"
												dataOnly="false"
												pegaRulesJarPath="${pega.rules}/PRPC_Rules.jar"/>
        <readcodesetfromprdeploy targetProp="prdeploy.codeset" prdeployLocation="${pega.prdeploy}"/>
        <property name="pega.codeset.version.value" value="${prdeploy.codeset}"/>
        <ac:propertyregex property="upgradeToMajorMinor" input="${pega.codeset.version.value}" select="\1" regexp="(\d\d-\d\d)-\d\d" />
        <ac:if>
            <ac:not>
                <pega:compareversions version="${previous.product}" compareToVersion="${upgradeToMajorMinor}" compareType="less"/>
            </ac:not>
            <ac:then>
                <property name="patch.upgrade" value="true"/>
            </ac:then>
        </ac:if>
		<condition property="patch.upgrade.value" value="${patch.upgrade}" else="false">
			<isset property="patch.upgrade"/>
		</condition>

        <echo file="${result.filepath}" append="true">is_patch_upgrade=${patch.upgrade.value}${line.separator}</echo>
    </target>
</project>


